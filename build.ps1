# This script is used for windows only,
# if you are using linux/macOS, please use test.sh instead of it.
# conan only provide all x64 dependencies, so all test need baseded on x64.

param(
    [string]$BUILD_PARA = '',
    [Int]$COMPILER_VERSION = 16,
    [Int]$VS_VERSION = 2019
)

Write-Host -ForegroundColor:Yellow "BUILD_PARA:$BUILD_PARA"
Write-Host -ForegroundColor:Yellow "VS COMPILER_VERSION:$COMPILER_VERSION"
Write-Host -ForegroundColor:Yellow "VS VERSION:$VS_VERSION"
$OS=$env:OS
Write-Host -ForegroundColor:Yellow "OS:$OS"
if ($OS -ne "Windows_NT"){
	Write-Host -ForegroundColor:Yellow "This script is for windows, please use build.sh for other OS"
	exit -1
}

Write-Host -ForegroundColor:Green '
# Using params for this script as bellow: 
build.ps1 -t
build.ps1 -tshared
 '

$src_dir=$PWD
# set arch to x64
Enter-VsDevShell -VsInstallPath "C:\Program Files (x86)\Microsoft Visual Studio\$VS_VERSION\Professional" -DevCmdArguments "-arch=x64 -host_arch=x64" -SkipAutomaticLocation

#build drogon
function build_drogon($para){
    #Update the submodule and initialize
    git submodule update --init

    #Remove the config.h generated by the old version of drogon.
    Remove-item  ./lib/inc/drogon/config.h -ErrorAction SilentlyContinue

    #Save current directory
    $current_dir=$PWD

    #The folder in which we will build drogon
    $build_dir="$current_dir/build"
    if (Test-Path -Path $build_dir) {
        echo "Deleted folder: $build_dir"
        Remove-item $build_dir -recurse -ErrorAction SilentlyContinue
    }

    #Create building folder
    echo "Created building folder: $build_dir"
    mkdir $build_dir

    echo "Entering folder: $build_dir"
    cd $build_dir

    echo "Start building drogon ..."
    if ( $para -eq 1 ) {
        conan install .. -s compiler="Visual Studio" -s compiler.version=$COMPILER_VERSION -s build_type=Debug -g cmake_paths
        cmake .. -DBUILD_TESTING=YES "-DCMAKE_TOOLCHAIN_FILE=$build_dir/conan_paths.cmake" $cmake_gen
    } elseif ( $para -eq 2 ) {
        conan install .. -s compiler="Visual Studio" -s compiler.version=$COMPILER_VERSION -s build_type=Debug -g cmake_paths
        cmake .. -DBUILD_TESTING=YES -DBUILD_DROGON_SHARED=ON -DCMAKE_CXX_VISIBILITY_PRESET=hidden -DCMAKE_VISIBILITY_INLINES_HIDDEN=1 "-DCMAKE_TOOLCHAIN_FILE=$build_dir/conan_paths.cmake" $cmake_gen
    } else {
        conan install .. -s compiler="Visual Studio" -s compiler.version=$COMPILER_VERSION -s build_type=Release -g cmake_paths
        cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=$build_dir/conan_paths.cmake" $cmake_gen
    }

    #If errors then exit
    if ( !$? ) {
        exit -1
    }
    
    echo "Build and Installing ..."
    cmake --build .  --parallel --target install "$make_flags"
    
    #If errors then exit
    if ( !$? ) {
        exit -1
    }

    #Go back to the current directory
    cd $current_dir
    #Ok!
}

$make_flags=''
$cmake_gen=''
$parallel=$env:NUMBER_OF_PROCESSORS

if ((Test-Path -IsValid "Ninja")) {
	$cmake_gen='-GNinja'
} else{
    $make_flags="$make_flags -j$parallel"
}

if ($BUILD_PARA -eq "-t"){
    build_drogon 1
} elseif ($BUILD_PARA -eq "-tshared"){
    build_drogon 2
} else {
    build_drogon 0
}